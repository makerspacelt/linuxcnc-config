# ########################################
# Derived from example hm2-stepper config
# And Marius Alksnys previous work
# ########################################

# Launch the setup script to make sure hardware setup looks good
loadusr -w ./pre-run.sh

# ###################################
# Core EMC/HAL Loads
# ###################################

# kinematics
loadrt trivkins

# motion controller, get name and thread periods from ini file
# trajectory planner
loadrt tp
loadrt [EMCMOT]EMCMOT servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[TRAJ]AXES tp=tp kins=trivkins

# load low-level drivers
loadrt hal_bb_gpio output_pins=216,230,107,113 input_pins=108,110,112,114
loadrt [PRUCONF](DRIVER) prucode=$(HAL_RTMOD_DIR)/[PRUCONF](PRUBIN) [PRUCONF](CONFIG) halname=hpg

# Deboune conponent for e-stop
newinst debounce dbc pincount=1

#loadrt laserraster linear_units=[TRAJ]LINEAR_UNITS axis_scale=[AXIS_0]SCALE axis_min_limit=[AXIS_0]MIN_LIMIT axis_max_limit=[AXIS_0]MAX_LIMIT
loadrt laserfreq

# ################################################
# THREADS
# ################################################
addf hpg.update              servo-thread
addf hpg.capture-position    servo-thread
addf motion-command-handler  servo-thread
addf motion-controller       servo-thread
addf bb_gpio.write           servo-thread
addf bb_gpio.read            servo-thread
addf dbc.funct               servo-thread

#addf laserraster.0.update      servo-thread
addf laserfreq.0.update        servo-thread
#addf laserraster.0.make-pulses servo-thread
addf laserfreq.0.make-pulses   servo-thread

# ###############################################
# PWM
# ###############################################
setp hpg.pwmgen.00.pwm_period 83000
setp hpg.pwmgen.00.out.00.pin 97
setp hpg.pwmgen.00.out.00.enable 1
setp hpg.pwmgen.00.out.00.scale 125


# ###############
# CUST
# ##############
net laser-power-cmd <= motion.analog-out-00 => hpg.pwmgen.00.out.00.value
net coolant-mist <= iocontrol.0.coolant-mist
net zpos-cmd-fb <= axis.2.motor-pos-cmd => axis.2.motor-pos-fb

# M3/M5, not realtime/coordinated but master on/off:
net laser-master <= motion.spindle-on
# M62/M63 coordinated or M64/M65 immediate firing:
# M62/M63 coordinated or M64/M65 immediate firing:
net laser-dout <= motion.digital-out-00


setp laserfreq.0.duration [LASER]PULSED_CUT_DURATION
net current-vel motion.current-vel => laserfreq.0.velocity
net laser-freq-speed motion.spindle-speed-out => laserfreq.0.pulse-per-unit
net laser-freq-trick-axis-rev motion.spindle-reverse
#net laser-dout => laserfreq.0.enable
setp laserfreq.0.enable 1
net laser-pulsed <= laserfreq.0.pulse

########################

loadrt comp names=laser-magic-z-comp
addf laser-magic-z-comp servo-thread
net zpos-fb <= axis.2.joint-pos-fb => laser-magic-z-comp.in0
setp laser-magic-z-comp.in1 -0.0001
net laser-magic-z <= laser-magic-z-comp.out

########################

# Final laser equation:  When laser-master is enabled (M3) fire for
# raster or at pulse rate when cutting:
#
########################

# Final laser equation:  When laser-master is enabled (M3) fire for
# raster or at pulse rate when cutting:
#
# laser-final <= laser-master &
#                    (laser-raster |
#                   ((laser-magic-z | laser-dout) & laser-pulsed))

loadrt lut5 names=laser-final-lut
addf laser-final-lut servo-thread
setp laser-final-lut.function 0xfeaa0000
net  laser-dout        => laser-final-lut.in-1
net  laser-magic-z     => laser-final-lut.in-2
net  laser-pulsed      => laser-final-lut.in-3
net  laser-master      => laser-final-lut.in-4
net laser-final <= laser-final-lut.out

########################
# exhaust/assist-air control

loadrt oneshot names=laser-exhaust-oneshot
loadrt or2 names=laser-exhaust-or
addf laser-exhaust-oneshot servo-thread
addf laser-exhaust-or servo-thread

net laser-master        => laser-exhaust-oneshot.in
net laser-exhaust-extra <= laser-exhaust-oneshot.out
setp laser-exhaust-oneshot.retriggerable 1
setp laser-exhaust-oneshot.width [LASER]EXTRA_EXHAUST_TIME
setp laser-exhaust-oneshot.rising 0
setp laser-exhaust-oneshot.falling 1

net laser-master        => laser-exhaust-or.in0
net laser-exhaust-extra => laser-exhaust-or.in1
net laser-exhaust       <= laser-exhaust-or.out


net laser-final => bb_gpio.p9.out-16

# ################
# X [0] Axis
# ################
# axis enable chain
newsig emcmot.00.enable bit
sets emcmot.00.enable FALSE

net emcmot.00.enable <= axis.0.amp-enable-out
net emcmot.00.enable => hpg.stepgen.00.enable

# position command and feedback
net emcmot.00.pos-cmd <= axis.0.motor-pos-cmd
net emcmot.00.pos-cmd => hpg.stepgen.00.position-cmd

net motor.00.pos-fb <= hpg.stepgen.00.position-fb
net motor.00.pos-fb => axis.0.motor-pos-fb

# timing parameters
setp hpg.stepgen.00.dirsetup        200 #[AXIS_0]DIRSETUP
setp hpg.stepgen.00.dirhold         200 #[AXIS_0]DIRHOLD

setp hpg.stepgen.00.steplen         10000 #[AXIS_0]STEPLEN
setp hpg.stepgen.00.stepspace       10000 #[AXIS_0]STEPSPACE

setp hpg.stepgen.00.position-scale  [AXIS_0]SCALE

setp hpg.stepgen.00.maxaccel        [AXIS_0]STEPGEN_MAX_ACC

setp hpg.stepgen.00.steppin         101
setp hpg.stepgen.00.dirpin          77


# ################
# Y [1] Axis
# ################
# axis enable chain
newsig emcmot.01.enable bit
sets emcmot.01.enable FALSE

net emcmot.01.enable <= axis.1.amp-enable-out
net emcmot.01.enable => hpg.stepgen.01.enable

# position command and feedback
net emcmot.01.pos-cmd <= axis.1.motor-pos-cmd
net emcmot.01.pos-cmd => hpg.stepgen.01.position-cmd

net motor.01.pos-fb <= hpg.stepgen.01.position-fb
net motor.01.pos-fb => axis.1.motor-pos-fb

# timing parameters
setp hpg.stepgen.01.dirsetup        200 #[AXIS_1]DIRSETUP
setp hpg.stepgen.01.dirhold         200 #[AXIS_1]DIRHOLD

setp hpg.stepgen.01.steplen         10000 #[AXIS_1]STEPLEN
setp hpg.stepgen.01.stepspace       10000 #[AXIS_1]STEPSPACE

setp hpg.stepgen.01.position-scale  [AXIS_1]SCALE

setp hpg.stepgen.01.maxaccel        [AXIS_1]STEPGEN_MAX_ACC

setp hpg.stepgen.01.steppin         79
setp hpg.stepgen.01.dirpin          59


# ##################################################
# Standard I/O - EStop, Enables, Limit Switches, Etc
# ##################################################

# Enables
net emcmot.00.enable => bb_gpio.p8.out-07
#setp bb_gpio.p8.out-07.invert 1
net emcmot.01.enable => bb_gpio.p8.out-13
#setp bb_gpio.p8.out-13.invert 1

# Home switches
# X
#net x-home bb_gpio.p8.in-10 => axis.0.home-sw-in
setp bb_gpio.p8.in-10.invert 1

setp dbc.delay 5
net estop-ext-raw bb_gpio.p8.in-08 => dbc.0.in
net estop-ext dbc.0.out => iocontrol.0.emc-enable-in
setp bb_gpio.p8.in-08.invert 1

# create signals for tool loading loopback
net tool-prep-loop iocontrol.0.tool-prepare => iocontrol.0.tool-prepared
net tool-change-loop iocontrol.0.tool-change => iocontrol.0.tool-changed

